
MCUtoDSPv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a7c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002c44  08002c44  00003c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c54  08002c54  0000642c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c54  08002c54  00003c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c5c  08002c5c  0000642c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c5c  08002c5c  00003c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c60  08002c60  00003c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000242c  20000000  08002c64  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000242c  08005090  0000642c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024a0  08005090  000064a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000642c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008244  00000000  00000000  0000645c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000161d  00000000  00000000  0000e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0000fcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ed  00000000  00000000  00010490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247f2  00000000  00000000  00010a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a590  00000000  00000000  0003526f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1533  00000000  00000000  0003f7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120d32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f58  00000000  00000000  00120d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00122cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000242c 	.word	0x2000242c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002c2c 	.word	0x08002c2c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20002430 	.word	0x20002430
 8000204:	08002c2c 	.word	0x08002c2c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <SIGMA_WRITE_REGISTER_BLOCK>:
typedef unsigned char ADI_REG_TYPE;

#define trapRegAddr1	0x81A
#define trapRegAddr2	0x81B

void SIGMA_WRITE_REGISTER_BLOCK(int devAddress, int regAddr, int length, ADI_REG_TYPE *pData) {
 80004f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004fc:	b08b      	sub	sp, #44	@ 0x2c
 80004fe:	af02      	add	r7, sp, #8
 8000500:	60f8      	str	r0, [r7, #12]
 8000502:	60b9      	str	r1, [r7, #8]
 8000504:	607a      	str	r2, [r7, #4]
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	466b      	mov	r3, sp
 800050a:	461e      	mov	r6, r3
	ADI_REG_TYPE I2C_buffer[2 + length];
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	1c99      	adds	r1, r3, #2
 8000510:	1e4b      	subs	r3, r1, #1
 8000512:	61bb      	str	r3, [r7, #24]
 8000514:	460a      	mov	r2, r1
 8000516:	2300      	movs	r3, #0
 8000518:	4690      	mov	r8, r2
 800051a:	4699      	mov	r9, r3
 800051c:	f04f 0200 	mov.w	r2, #0
 8000520:	f04f 0300 	mov.w	r3, #0
 8000524:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000528:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800052c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000530:	460a      	mov	r2, r1
 8000532:	2300      	movs	r3, #0
 8000534:	4614      	mov	r4, r2
 8000536:	461d      	mov	r5, r3
 8000538:	f04f 0200 	mov.w	r2, #0
 800053c:	f04f 0300 	mov.w	r3, #0
 8000540:	00eb      	lsls	r3, r5, #3
 8000542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000546:	00e2      	lsls	r2, r4, #3
 8000548:	460b      	mov	r3, r1
 800054a:	3307      	adds	r3, #7
 800054c:	08db      	lsrs	r3, r3, #3
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	ebad 0d03 	sub.w	sp, sp, r3
 8000554:	ab02      	add	r3, sp, #8
 8000556:	3300      	adds	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
    I2C_buffer[0] = (regAddr & 0xFF00) >> 8;  // High byte of the address
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	121b      	asrs	r3, r3, #8
 800055e:	b2da      	uxtb	r2, r3
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	701a      	strb	r2, [r3, #0]
    I2C_buffer[1] = (regAddr & 0x00FF);       // Low byte of the address
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	b2da      	uxtb	r2, r3
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	705a      	strb	r2, [r3, #1]

    // Copy the data into the I2C buffer
    for (int i = 0; i < length; i++) {
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
 8000570:	e00a      	b.n	8000588 <SIGMA_WRITE_REGISTER_BLOCK+0x90>
        I2C_buffer[2 + i] = pData[i];
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	441a      	add	r2, r3
 8000578:	69fb      	ldr	r3, [r7, #28]
 800057a:	3302      	adds	r3, #2
 800057c:	7811      	ldrb	r1, [r2, #0]
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; i++) {
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	3301      	adds	r3, #1
 8000586:	61fb      	str	r3, [r7, #28]
 8000588:	69fa      	ldr	r2, [r7, #28]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	429a      	cmp	r2, r3
 800058e:	dbf0      	blt.n	8000572 <SIGMA_WRITE_REGISTER_BLOCK+0x7a>
    }
    // Transmit the data via I2C
    if (HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR_IC_1_WRITE, I2C_buffer, 2 + length, HAL_MAX_DELAY) == HAL_OK) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	b29b      	uxth	r3, r3
 8000594:	3302      	adds	r3, #2
 8000596:	b29b      	uxth	r3, r3
 8000598:	f04f 32ff 	mov.w	r2, #4294967295
 800059c:	9200      	str	r2, [sp, #0]
 800059e:	697a      	ldr	r2, [r7, #20]
 80005a0:	2168      	movs	r1, #104	@ 0x68
 80005a2:	480b      	ldr	r0, [pc, #44]	@ (80005d0 <SIGMA_WRITE_REGISTER_BLOCK+0xd8>)
 80005a4:	f000 fee6 	bl	8001374 <HAL_I2C_Master_Transmit>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d105      	bne.n	80005ba <SIGMA_WRITE_REGISTER_BLOCK+0xc2>
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2101      	movs	r1, #1
 80005b2:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <SIGMA_WRITE_REGISTER_BLOCK+0xdc>)
 80005b4:	f000 fe28 	bl	8001208 <HAL_GPIO_WritePin>
 80005b8:	e004      	b.n	80005c4 <SIGMA_WRITE_REGISTER_BLOCK+0xcc>
    } else {
    	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2101      	movs	r1, #1
 80005be:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <SIGMA_WRITE_REGISTER_BLOCK+0xdc>)
 80005c0:	f000 fe22 	bl	8001208 <HAL_GPIO_WritePin>
 80005c4:	46b5      	mov	sp, r6
    }

}
 80005c6:	bf00      	nop
 80005c8:	3724      	adds	r7, #36	@ 0x24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80005d0:	20002448 	.word	0x20002448
 80005d4:	40020400 	.word	0x40020400

080005d8 <DSP_TONE1_CHANGE_FREQUENCY>:
		SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1_WRITE, 0x0003, 4, MODE_0_1);			/* sin_lookupAlg19401increment */
		SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1_WRITE, 0x0004, 4, MODE_0_2);			/* sin_lookupAlg19401ison */
	}
}

void DSP_TONE1_CHANGE_FREQUENCY(float frequency) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
 80005de:	ed87 0a01 	vstr	s0, [r7, #4]
    float sample_rate = 48000.0; // Assuming 48kHz sample rate
 80005e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000694 <DSP_TONE1_CHANGE_FREQUENCY+0xbc>)
 80005e4:	61bb      	str	r3, [r7, #24]
    float normalized_freq = frequency / sample_rate; // Normalized frequency (0 to 1)
 80005e6:	edd7 6a01 	vldr	s13, [r7, #4]
 80005ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80005ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005f2:	edc7 7a05 	vstr	s15, [r7, #20]

    // Double the normalized frequency as SigmaStudio seems to scale it this way
    normalized_freq *= 2.0;
 80005f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80005fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80005fe:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert normalized frequency to 5.23 fixed-point format
    int fixed_point_value = (int)(normalized_freq * (1 << 23)); // Multiply by 2^23
 8000602:	edd7 7a05 	vldr	s15, [r7, #20]
 8000606:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000698 <DSP_TONE1_CHANGE_FREQUENCY+0xc0>
 800060a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800060e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000612:	ee17 3a90 	vmov	r3, s15
 8000616:	61fb      	str	r3, [r7, #28]

    // Clamp to 28-bit signed integer range
    if (fixed_point_value > (1 << 27) - 1) {
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800061e:	db03      	blt.n	8000628 <DSP_TONE1_CHANGE_FREQUENCY+0x50>
        fixed_point_value = (1 << 27) - 1;
 8000620:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
 8000624:	61fb      	str	r3, [r7, #28]
 8000626:	e006      	b.n	8000636 <DSP_TONE1_CHANGE_FREQUENCY+0x5e>
    } else if (fixed_point_value < -(1 << 27)) {
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	f1b3 4f78 	cmp.w	r3, #4160749568	@ 0xf8000000
 800062e:	da02      	bge.n	8000636 <DSP_TONE1_CHANGE_FREQUENCY+0x5e>
        fixed_point_value = -(1 << 27);
 8000630:	f04f 4378 	mov.w	r3, #4160749568	@ 0xf8000000
 8000634:	61fb      	str	r3, [r7, #28]
    }

    ADI_REG_TYPE MODE_0_0[4] = {0x00, 0x00, 0x00, 0xFF};
 8000636:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800063a:	613b      	str	r3, [r7, #16]

    // Convert the fixed-point value to 4-byte array (big-endian)
    ADI_REG_TYPE MODE_0_1[4];
    MODE_0_1[0] = (fixed_point_value >> 24) & 0xFF;
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	0e1b      	lsrs	r3, r3, #24
 8000640:	b2db      	uxtb	r3, r3
 8000642:	733b      	strb	r3, [r7, #12]
    MODE_0_1[1] = (fixed_point_value >> 16) & 0xFF;
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	141b      	asrs	r3, r3, #16
 8000648:	b2db      	uxtb	r3, r3
 800064a:	737b      	strb	r3, [r7, #13]
    MODE_0_1[2] = (fixed_point_value >> 8) & 0xFF;
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	121b      	asrs	r3, r3, #8
 8000650:	b2db      	uxtb	r3, r3
 8000652:	73bb      	strb	r3, [r7, #14]
    MODE_0_1[3] = fixed_point_value & 0xFF;
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	73fb      	strb	r3, [r7, #15]

    ADI_REG_TYPE MODE_0_2[4] = {0x00, 0x80, 0x00, 0x00};
 800065a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800065e:	60bb      	str	r3, [r7, #8]

    SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1_WRITE, 0x0002, 4, MODE_0_0);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	2204      	movs	r2, #4
 8000666:	2102      	movs	r1, #2
 8000668:	2068      	movs	r0, #104	@ 0x68
 800066a:	f7ff ff45 	bl	80004f8 <SIGMA_WRITE_REGISTER_BLOCK>
    SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1_WRITE, 0x0003, 4, MODE_0_1);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2204      	movs	r2, #4
 8000674:	2103      	movs	r1, #3
 8000676:	2068      	movs	r0, #104	@ 0x68
 8000678:	f7ff ff3e 	bl	80004f8 <SIGMA_WRITE_REGISTER_BLOCK>
    SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1_WRITE, 0x0004, 4, MODE_0_2);
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2204      	movs	r2, #4
 8000682:	2104      	movs	r1, #4
 8000684:	2068      	movs	r0, #104	@ 0x68
 8000686:	f7ff ff37 	bl	80004f8 <SIGMA_WRITE_REGISTER_BLOCK>
}
 800068a:	bf00      	nop
 800068c:	3720      	adds	r7, #32
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	473b8000 	.word	0x473b8000
 8000698:	4b000000 	.word	0x4b000000

0800069c <default_download_IC_1>:
/*
 * Default Download
 */
#define DEFAULT_DOWNLOAD_SIZE_IC_1 5

void default_download_IC_1() {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_COREREGISTER_IC_1_ADDR, REG_COREREGISTER_IC_1_BYTE, R0_COREREGISTER_IC_1_Default );
 80006a0:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <default_download_IC_1+0x50>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	f640 011c 	movw	r1, #2076	@ 0x81c
 80006a8:	2068      	movs	r0, #104	@ 0x68
 80006aa:	f7ff ff25 	bl	80004f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <default_download_IC_1+0x54>)
 80006b0:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80006b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006b8:	2068      	movs	r0, #104	@ 0x68
 80006ba:	f7ff ff1d 	bl	80004f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
 80006be:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <default_download_IC_1+0x58>)
 80006c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006c4:	2100      	movs	r1, #0
 80006c6:	2068      	movs	r0, #104	@ 0x68
 80006c8:	f7ff ff16 	bl	80004f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_COREREGISTER_IC_1_ADDR , R3_HWCONFIGURATION_IC_1_SIZE, R3_HWCONFIGURATION_IC_1_Default );
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <default_download_IC_1+0x5c>)
 80006ce:	2218      	movs	r2, #24
 80006d0:	f640 011c 	movw	r1, #2076	@ 0x81c
 80006d4:	2068      	movs	r0, #104	@ 0x68
 80006d6:	f7ff ff0f 	bl	80004f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_COREREGISTER_IC_1_ADDR, REG_COREREGISTER_IC_1_BYTE, R4_COREREGISTER_IC_1_Default );
 80006da:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <default_download_IC_1+0x60>)
 80006dc:	2202      	movs	r2, #2
 80006de:	f640 011c 	movw	r1, #2076	@ 0x81c
 80006e2:	2068      	movs	r0, #104	@ 0x68
 80006e4:	f7ff ff08 	bl	80004f8 <SIGMA_WRITE_REGISTER_BLOCK>

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20002400 	.word	0x20002400
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20001400 	.word	0x20001400
 80006f8:	20002404 	.word	0x20002404
 80006fc:	2000241c 	.word	0x2000241c

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000704:	f000 f8fa 	bl	80008fc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 fa17 	bl	8000b3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f80e 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f000 f8aa 	bl	8000868 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000714:	f000 f866 	bl	80007e4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  default_download_IC_1();
 8000718:	f7ff ffc0 	bl	800069c <default_download_IC_1>
  DSP_TONE1_CHANGE_FREQUENCY(600);
 800071c:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8000728 <main+0x28>
 8000720:	f7ff ff5a 	bl	80005d8 <DSP_TONE1_CHANGE_FREQUENCY>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <main+0x24>
 8000728:	44160000 	.word	0x44160000

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	@ 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	@ 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fa4a 	bl	8002bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <SystemClock_Config+0xb0>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	4a21      	ldr	r2, [pc, #132]	@ (80007dc <SystemClock_Config+0xb0>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	@ 0x40
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <SystemClock_Config+0xb0>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000768:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <SystemClock_Config+0xb4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000770:	4a1b      	ldr	r2, [pc, #108]	@ (80007e0 <SystemClock_Config+0xb4>)
 8000772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <SystemClock_Config+0xb4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f001 f9d5 	bl	8001b48 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80007a4:	f000 f8d6 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fc64 	bl	8002090 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007ce:	f000 f8c1 	bl	8000954 <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	@ 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <MX_I2C2_Init+0x7c>)
 80007ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000864 <MX_I2C2_Init+0x80>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000107;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <MX_I2C2_Init+0x7c>)
 80007f0:	f240 1207 	movw	r2, #263	@ 0x107
 80007f4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_I2C2_Init+0x7c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fc:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <MX_I2C2_Init+0x7c>)
 80007fe:	2201      	movs	r2, #1
 8000800:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000802:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_I2C2_Init+0x7c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000808:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <MX_I2C2_Init+0x7c>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_I2C2_Init+0x7c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_I2C2_Init+0x7c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_I2C2_Init+0x7c>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000820:	480f      	ldr	r0, [pc, #60]	@ (8000860 <MX_I2C2_Init+0x7c>)
 8000822:	f000 fd0b 	bl	800123c <HAL_I2C_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800082c:	f000 f892 	bl	8000954 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	480b      	ldr	r0, [pc, #44]	@ (8000860 <MX_I2C2_Init+0x7c>)
 8000834:	f001 f8d0 	bl	80019d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800083e:	f000 f889 	bl	8000954 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4806      	ldr	r0, [pc, #24]	@ (8000860 <MX_I2C2_Init+0x7c>)
 8000846:	f001 f912 	bl	8001a6e <HAL_I2CEx_ConfigDigitalFilter>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000850:	f000 f880 	bl	8000954 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8000854:	2002      	movs	r0, #2
 8000856:	f001 f957 	bl	8001b08 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20002448 	.word	0x20002448
 8000864:	40005800 	.word	0x40005800

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087e:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <MX_GPIO_Init+0x8c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a1c      	ldr	r2, [pc, #112]	@ (80008f4 <MX_GPIO_Init+0x8c>)
 8000884:	f043 0320 	orr.w	r3, r3, #32
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_GPIO_Init+0x8c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0320 	and.w	r3, r3, #32
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_GPIO_Init+0x8c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a16      	ldr	r2, [pc, #88]	@ (80008f4 <MX_GPIO_Init+0x8c>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_GPIO_Init+0x8c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_GPIO_Init+0x8c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a10      	ldr	r2, [pc, #64]	@ (80008f4 <MX_GPIO_Init+0x8c>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_GPIO_Init+0x8c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2181      	movs	r1, #129	@ 0x81
 80008ca:	480b      	ldr	r0, [pc, #44]	@ (80008f8 <MX_GPIO_Init+0x90>)
 80008cc:	f000 fc9c 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80008d0:	2381      	movs	r3, #129	@ 0x81
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4619      	mov	r1, r3
 80008e6:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <MX_GPIO_Init+0x90>)
 80008e8:	f000 fae2 	bl	8000eb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ec:	bf00      	nop
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020400 	.word	0x40020400

080008fc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800090e:	f000 fa57 	bl	8000dc0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000912:	2301      	movs	r3, #1
 8000914:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000916:	2300      	movs	r3, #0
 8000918:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800091e:	231f      	movs	r3, #31
 8000920:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000922:	2387      	movs	r3, #135	@ 0x87
 8000924:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000926:	2300      	movs	r3, #0
 8000928:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800092a:	2300      	movs	r3, #0
 800092c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800092e:	2301      	movs	r3, #1
 8000930:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000932:	2301      	movs	r3, #1
 8000934:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800093e:	463b      	mov	r3, r7
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fa75 	bl	8000e30 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000946:	2004      	movs	r0, #4
 8000948:	f000 fa52 	bl	8000df0 <HAL_MPU_Enable>

}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <Error_Handler+0x8>

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <HAL_MspInit+0x44>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	4a0e      	ldr	r2, [pc, #56]	@ (80009a4 <HAL_MspInit+0x44>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	@ 0x40
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <HAL_MspInit+0x44>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <HAL_MspInit+0x44>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000982:	4a08      	ldr	r2, [pc, #32]	@ (80009a4 <HAL_MspInit+0x44>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000988:	6453      	str	r3, [r2, #68]	@ 0x44
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <HAL_MspInit+0x44>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b0aa      	sub	sp, #168	@ 0xa8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	2284      	movs	r2, #132	@ 0x84
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 f903 	bl	8002bd4 <memset>
  if(hi2c->Instance==I2C2)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a21      	ldr	r2, [pc, #132]	@ (8000a58 <HAL_I2C_MspInit+0xb0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d13b      	bne.n	8000a50 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80009d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80009de:	2300      	movs	r3, #0
 80009e0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 fd04 	bl	80023f4 <HAL_RCCEx_PeriphCLKConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009f2:	f7ff ffaf 	bl	8000954 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <HAL_I2C_MspInit+0xb4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a18      	ldr	r2, [pc, #96]	@ (8000a5c <HAL_I2C_MspInit+0xb4>)
 80009fc:	f043 0320 	orr.w	r3, r3, #32
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <HAL_I2C_MspInit+0xb4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0320 	and.w	r3, r3, #32
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a14:	2312      	movs	r3, #18
 8000a16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a26:	2304      	movs	r3, #4
 8000a28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a2c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a30:	4619      	mov	r1, r3
 8000a32:	480b      	ldr	r0, [pc, #44]	@ (8000a60 <HAL_I2C_MspInit+0xb8>)
 8000a34:	f000 fa3c 	bl	8000eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_I2C_MspInit+0xb4>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <HAL_I2C_MspInit+0xb4>)
 8000a3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <HAL_I2C_MspInit+0xb4>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000a50:	bf00      	nop
 8000a52:	37a8      	adds	r7, #168	@ 0xa8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40005800 	.word	0x40005800
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40021400 	.word	0x40021400

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <NMI_Handler+0x4>

08000a6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aba:	f000 f87b 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aec:	f7ff ffea 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	@ (8000b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	@ (8000b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b16:	f002 f865 	bl	8002be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1a:	f7ff fdf1 	bl	8000700 <main>
  bx  lr    
 8000b1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b20:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	2000242c 	.word	0x2000242c
  ldr r2, =_sidata
 8000b2c:	08002c64 	.word	0x08002c64
  ldr r2, =_sbss
 8000b30:	2000242c 	.word	0x2000242c
  ldr r4, =_ebss
 8000b34:	200024a0 	.word	0x200024a0

08000b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC_IRQHandler>

08000b3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f000 f90a 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b44:	200f      	movs	r0, #15
 8000b46:	f000 f805 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4a:	f7ff ff09 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <HAL_InitTick+0x54>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <HAL_InitTick+0x58>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f917 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00e      	b.n	8000ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d80a      	bhi.n	8000b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f000 f8ed 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4a06      	ldr	r2, [pc, #24]	@ (8000bb0 <HAL_InitTick+0x5c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20002420 	.word	0x20002420
 8000bac:	20002428 	.word	0x20002428
 8000bb0:	20002424 	.word	0x20002424

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20002428 	.word	0x20002428
 8000bd8:	2000249c 	.word	0x2000249c

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	@ (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	2000249c 	.word	0x2000249c

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <__NVIC_SetPriorityGrouping+0x40>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <__NVIC_SetPriorityGrouping+0x40>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00
 8000c38:	05fa0000 	.word	0x05fa0000

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	@ (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	@ (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	@ 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff47 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff5c 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffb0 	bl	8000d14 <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000dc4:	f3bf 8f5f 	dmb	sy
}
 8000dc8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000dca:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <HAL_MPU_Disable+0x28>)
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dce:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <HAL_MPU_Disable+0x28>)
 8000dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dd4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000dd6:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <HAL_MPU_Disable+0x2c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00
 8000dec:	e000ed90 	.word	0xe000ed90

08000df0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000df8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e28 <HAL_MPU_Enable+0x38>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e02:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <HAL_MPU_Enable+0x3c>)
 8000e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e06:	4a09      	ldr	r2, [pc, #36]	@ (8000e2c <HAL_MPU_Enable+0x3c>)
 8000e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e0c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e0e:	f3bf 8f4f 	dsb	sy
}
 8000e12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e14:	f3bf 8f6f 	isb	sy
}
 8000e18:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed90 	.word	0xe000ed90
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	785a      	ldrb	r2, [r3, #1]
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <HAL_MPU_ConfigRegion+0x7c>)
 8000e3e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <HAL_MPU_ConfigRegion+0x7c>)
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	4a19      	ldr	r2, [pc, #100]	@ (8000eac <HAL_MPU_ConfigRegion+0x7c>)
 8000e46:	f023 0301 	bic.w	r3, r3, #1
 8000e4a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000e4c:	4a17      	ldr	r2, [pc, #92]	@ (8000eac <HAL_MPU_ConfigRegion+0x7c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7b1b      	ldrb	r3, [r3, #12]
 8000e58:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7adb      	ldrb	r3, [r3, #11]
 8000e5e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7a9b      	ldrb	r3, [r3, #10]
 8000e66:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7b5b      	ldrb	r3, [r3, #13]
 8000e6e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7b9b      	ldrb	r3, [r3, #14]
 8000e76:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7bdb      	ldrb	r3, [r3, #15]
 8000e7e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7a5b      	ldrb	r3, [r3, #9]
 8000e86:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7a1b      	ldrb	r3, [r3, #8]
 8000e8e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e90:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e98:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e9a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e9c:	6113      	str	r3, [r2, #16]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed90 	.word	0xe000ed90

08000eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	@ 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	e175      	b.n	80011bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	f040 8164 	bne.w	80011b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d005      	beq.n	8000f06 <HAL_GPIO_Init+0x56>
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d130      	bne.n	8000f68 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	091b      	lsrs	r3, r3, #4
 8000f52:	f003 0201 	and.w	r2, r3, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d017      	beq.n	8000fa4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d123      	bne.n	8000ff8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	69b9      	ldr	r1, [r7, #24]
 8000ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0203 	and.w	r2, r3, #3
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80be 	beq.w	80011b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b66      	ldr	r3, [pc, #408]	@ (80011d4 <HAL_GPIO_Init+0x324>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103e:	4a65      	ldr	r2, [pc, #404]	@ (80011d4 <HAL_GPIO_Init+0x324>)
 8001040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001044:	6453      	str	r3, [r2, #68]	@ 0x44
 8001046:	4b63      	ldr	r3, [pc, #396]	@ (80011d4 <HAL_GPIO_Init+0x324>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001052:	4a61      	ldr	r2, [pc, #388]	@ (80011d8 <HAL_GPIO_Init+0x328>)
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3302      	adds	r3, #2
 800105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a58      	ldr	r2, [pc, #352]	@ (80011dc <HAL_GPIO_Init+0x32c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d037      	beq.n	80010ee <HAL_GPIO_Init+0x23e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a57      	ldr	r2, [pc, #348]	@ (80011e0 <HAL_GPIO_Init+0x330>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d031      	beq.n	80010ea <HAL_GPIO_Init+0x23a>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a56      	ldr	r2, [pc, #344]	@ (80011e4 <HAL_GPIO_Init+0x334>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d02b      	beq.n	80010e6 <HAL_GPIO_Init+0x236>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a55      	ldr	r2, [pc, #340]	@ (80011e8 <HAL_GPIO_Init+0x338>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d025      	beq.n	80010e2 <HAL_GPIO_Init+0x232>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a54      	ldr	r2, [pc, #336]	@ (80011ec <HAL_GPIO_Init+0x33c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d01f      	beq.n	80010de <HAL_GPIO_Init+0x22e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a53      	ldr	r2, [pc, #332]	@ (80011f0 <HAL_GPIO_Init+0x340>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d019      	beq.n	80010da <HAL_GPIO_Init+0x22a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a52      	ldr	r2, [pc, #328]	@ (80011f4 <HAL_GPIO_Init+0x344>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x226>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a51      	ldr	r2, [pc, #324]	@ (80011f8 <HAL_GPIO_Init+0x348>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x222>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a50      	ldr	r2, [pc, #320]	@ (80011fc <HAL_GPIO_Init+0x34c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x21e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001200 <HAL_GPIO_Init+0x350>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x21a>
 80010c6:	2309      	movs	r3, #9
 80010c8:	e012      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010ca:	230a      	movs	r3, #10
 80010cc:	e010      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010ce:	2308      	movs	r3, #8
 80010d0:	e00e      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010d2:	2307      	movs	r3, #7
 80010d4:	e00c      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010d6:	2306      	movs	r3, #6
 80010d8:	e00a      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010da:	2305      	movs	r3, #5
 80010dc:	e008      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010de:	2304      	movs	r3, #4
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010e2:	2303      	movs	r3, #3
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010ee:	2300      	movs	r3, #0
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	f002 0203 	and.w	r2, r2, #3
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	4093      	lsls	r3, r2
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001100:	4935      	ldr	r1, [pc, #212]	@ (80011d8 <HAL_GPIO_Init+0x328>)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110e:	4b3d      	ldr	r3, [pc, #244]	@ (8001204 <HAL_GPIO_Init+0x354>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001132:	4a34      	ldr	r2, [pc, #208]	@ (8001204 <HAL_GPIO_Init+0x354>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001138:	4b32      	ldr	r3, [pc, #200]	@ (8001204 <HAL_GPIO_Init+0x354>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800115c:	4a29      	ldr	r2, [pc, #164]	@ (8001204 <HAL_GPIO_Init+0x354>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001162:	4b28      	ldr	r3, [pc, #160]	@ (8001204 <HAL_GPIO_Init+0x354>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001186:	4a1f      	ldr	r2, [pc, #124]	@ (8001204 <HAL_GPIO_Init+0x354>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800118c:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <HAL_GPIO_Init+0x354>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b0:	4a14      	ldr	r2, [pc, #80]	@ (8001204 <HAL_GPIO_Init+0x354>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	f67f ae86 	bls.w	8000ed0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3724      	adds	r7, #36	@ 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40013800 	.word	0x40013800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40021400 	.word	0x40021400
 80011f4:	40021800 	.word	0x40021800
 80011f8:	40021c00 	.word	0x40021c00
 80011fc:	40022000 	.word	0x40022000
 8001200:	40022400 	.word	0x40022400
 8001204:	40013c00 	.word	0x40013c00

08001208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001224:	e003      	b.n	800122e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	041a      	lsls	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e08b      	b.n	8001366 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fba0 	bl	80009a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2224      	movs	r2, #36	@ 0x24
 800126c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800128c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800129c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d107      	bne.n	80012b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	e006      	b.n	80012c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80012c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d108      	bne.n	80012de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	e007      	b.n	80012ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6859      	ldr	r1, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <HAL_I2C_Init+0x134>)
 80012fa:	430b      	orrs	r3, r1
 80012fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800130c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69d9      	ldr	r1, [r3, #28]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0201 	orr.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2220      	movs	r2, #32
 8001352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	02008000 	.word	0x02008000

08001374 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af02      	add	r7, sp, #8
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	461a      	mov	r2, r3
 8001380:	460b      	mov	r3, r1
 8001382:	817b      	strh	r3, [r7, #10]
 8001384:	4613      	mov	r3, r2
 8001386:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b20      	cmp	r3, #32
 8001392:	f040 80fd 	bne.w	8001590 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_I2C_Master_Transmit+0x30>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e0f6      	b.n	8001592 <HAL_I2C_Master_Transmit+0x21e>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013ac:	f7ff fc16 	bl	8000bdc <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2319      	movs	r3, #25
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 f914 	bl	80015ec <I2C_WaitOnFlagUntilTimeout>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e0e1      	b.n	8001592 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2221      	movs	r2, #33	@ 0x21
 80013d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2210      	movs	r2, #16
 80013da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	893a      	ldrh	r2, [r7, #8]
 80013ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2bff      	cmp	r3, #255	@ 0xff
 80013fe:	d906      	bls.n	800140e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	22ff      	movs	r2, #255	@ 0xff
 8001404:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001406:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e007      	b.n	800141e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001412:	b29a      	uxth	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001418:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800141c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001422:	2b00      	cmp	r3, #0
 8001424:	d024      	beq.n	8001470 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001440:	b29b      	uxth	r3, r3
 8001442:	3b01      	subs	r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800144e:	3b01      	subs	r3, #1
 8001450:	b29a      	uxth	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800145a:	b2db      	uxtb	r3, r3
 800145c:	3301      	adds	r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	8979      	ldrh	r1, [r7, #10]
 8001462:	4b4e      	ldr	r3, [pc, #312]	@ (800159c <HAL_I2C_Master_Transmit+0x228>)
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 fa83 	bl	8001974 <I2C_TransferConfig>
 800146e:	e066      	b.n	800153e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001474:	b2da      	uxtb	r2, r3
 8001476:	8979      	ldrh	r1, [r7, #10]
 8001478:	4b48      	ldr	r3, [pc, #288]	@ (800159c <HAL_I2C_Master_Transmit+0x228>)
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 fa78 	bl	8001974 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001484:	e05b      	b.n	800153e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	6a39      	ldr	r1, [r7, #32]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f000 f907 	bl	800169e <I2C_WaitOnTXISFlagUntilTimeout>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e07b      	b.n	8001592 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3b01      	subs	r3, #1
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014c2:	3b01      	subs	r3, #1
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d034      	beq.n	800153e <HAL_I2C_Master_Transmit+0x1ca>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d130      	bne.n	800153e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	2200      	movs	r2, #0
 80014e4:	2180      	movs	r1, #128	@ 0x80
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 f880 	bl	80015ec <I2C_WaitOnFlagUntilTimeout>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e04d      	b.n	8001592 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	2bff      	cmp	r3, #255	@ 0xff
 80014fe:	d90e      	bls.n	800151e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	22ff      	movs	r2, #255	@ 0xff
 8001504:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800150a:	b2da      	uxtb	r2, r3
 800150c:	8979      	ldrh	r1, [r7, #10]
 800150e:	2300      	movs	r3, #0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 fa2c 	bl	8001974 <I2C_TransferConfig>
 800151c:	e00f      	b.n	800153e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001522:	b29a      	uxth	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800152c:	b2da      	uxtb	r2, r3
 800152e:	8979      	ldrh	r1, [r7, #10]
 8001530:	2300      	movs	r3, #0
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 fa1b 	bl	8001974 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001542:	b29b      	uxth	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d19e      	bne.n	8001486 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	6a39      	ldr	r1, [r7, #32]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f8ed 	bl	800172c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e01a      	b.n	8001592 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2220      	movs	r2, #32
 8001562:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6859      	ldr	r1, [r3, #4]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <HAL_I2C_Master_Transmit+0x22c>)
 8001570:	400b      	ands	r3, r1
 8001572:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2220      	movs	r2, #32
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	e000      	b.n	8001592 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001590:	2302      	movs	r3, #2
  }
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	80002000 	.word	0x80002000
 80015a0:	fe00e800 	.word	0xfe00e800

080015a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d103      	bne.n	80015c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2200      	movs	r2, #0
 80015c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d007      	beq.n	80015e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699a      	ldr	r2, [r3, #24]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	619a      	str	r2, [r3, #24]
  }
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	4613      	mov	r3, r2
 80015fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015fc:	e03b      	b.n	8001676 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	6839      	ldr	r1, [r7, #0]
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 f8d6 	bl	80017b4 <I2C_IsErrorOccurred>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e041      	b.n	8001696 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001618:	d02d      	beq.n	8001676 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800161a:	f7ff fadf 	bl	8000bdc <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d302      	bcc.n	8001630 <I2C_WaitOnFlagUntilTimeout+0x44>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d122      	bne.n	8001676 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699a      	ldr	r2, [r3, #24]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	4013      	ands	r3, r2
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	429a      	cmp	r2, r3
 800163e:	bf0c      	ite	eq
 8001640:	2301      	moveq	r3, #1
 8001642:	2300      	movne	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	429a      	cmp	r2, r3
 800164c:	d113      	bne.n	8001676 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	f043 0220 	orr.w	r2, r3, #32
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2220      	movs	r2, #32
 800165e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00f      	b.n	8001696 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	699a      	ldr	r2, [r3, #24]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4013      	ands	r3, r2
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	429a      	cmp	r2, r3
 8001684:	bf0c      	ite	eq
 8001686:	2301      	moveq	r3, #1
 8001688:	2300      	movne	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	429a      	cmp	r2, r3
 8001692:	d0b4      	beq.n	80015fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016aa:	e033      	b.n	8001714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	68b9      	ldr	r1, [r7, #8]
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 f87f 	bl	80017b4 <I2C_IsErrorOccurred>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e031      	b.n	8001724 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c6:	d025      	beq.n	8001714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016c8:	f7ff fa88 	bl	8000bdc <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d302      	bcc.n	80016de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d11a      	bne.n	8001714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d013      	beq.n	8001714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f0:	f043 0220 	orr.w	r2, r3, #32
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2220      	movs	r2, #32
 80016fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e007      	b.n	8001724 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b02      	cmp	r3, #2
 8001720:	d1c4      	bne.n	80016ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001738:	e02f      	b.n	800179a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 f838 	bl	80017b4 <I2C_IsErrorOccurred>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e02d      	b.n	80017aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174e:	f7ff fa45 	bl	8000bdc <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	429a      	cmp	r2, r3
 800175c:	d302      	bcc.n	8001764 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d11a      	bne.n	800179a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	2b20      	cmp	r3, #32
 8001770:	d013      	beq.n	800179a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001776:	f043 0220 	orr.w	r2, r3, #32
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2220      	movs	r2, #32
 8001782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e007      	b.n	80017aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	d1c8      	bne.n	800173a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d068      	beq.n	80018b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2210      	movs	r2, #16
 80017e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017e8:	e049      	b.n	800187e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f0:	d045      	beq.n	800187e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017f2:	f7ff f9f3 	bl	8000bdc <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d302      	bcc.n	8001808 <I2C_IsErrorOccurred+0x54>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d13a      	bne.n	800187e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001812:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800181a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800182a:	d121      	bne.n	8001870 <I2C_IsErrorOccurred+0xbc>
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001832:	d01d      	beq.n	8001870 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001834:	7cfb      	ldrb	r3, [r7, #19]
 8001836:	2b20      	cmp	r3, #32
 8001838:	d01a      	beq.n	8001870 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001848:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800184a:	f7ff f9c7 	bl	8000bdc <HAL_GetTick>
 800184e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001850:	e00e      	b.n	8001870 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001852:	f7ff f9c3 	bl	8000bdc <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b19      	cmp	r3, #25
 800185e:	d907      	bls.n	8001870 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	f043 0320 	orr.w	r3, r3, #32
 8001866:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800186e:	e006      	b.n	800187e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f003 0320 	and.w	r3, r3, #32
 800187a:	2b20      	cmp	r3, #32
 800187c:	d1e9      	bne.n	8001852 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0320 	and.w	r3, r3, #32
 8001888:	2b20      	cmp	r3, #32
 800188a:	d003      	beq.n	8001894 <I2C_IsErrorOccurred+0xe0>
 800188c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0aa      	beq.n	80017ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001898:	2b00      	cmp	r3, #0
 800189a:	d103      	bne.n	80018a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2220      	movs	r2, #32
 80018a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00b      	beq.n	80018dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	f043 0308 	orr.w	r3, r3, #8
 80018ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00b      	beq.n	8001920 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	f043 0302 	orr.w	r3, r3, #2
 800190e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001918:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01c      	beq.n	8001962 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f7ff fe3b 	bl	80015a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <I2C_IsErrorOccurred+0x1bc>)
 800193a:	400b      	ands	r3, r1
 800193c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	431a      	orrs	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2220      	movs	r2, #32
 800194e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001962:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001966:	4618      	mov	r0, r3
 8001968:	3728      	adds	r7, #40	@ 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	fe00e800 	.word	0xfe00e800

08001974 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	817b      	strh	r3, [r7, #10]
 8001982:	4613      	mov	r3, r2
 8001984:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001986:	897b      	ldrh	r3, [r7, #10]
 8001988:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800198c:	7a7b      	ldrb	r3, [r7, #9]
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001994:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	4313      	orrs	r3, r2
 800199e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	0d5b      	lsrs	r3, r3, #21
 80019ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <I2C_TransferConfig+0x60>)
 80019b4:	430b      	orrs	r3, r1
 80019b6:	43db      	mvns	r3, r3
 80019b8:	ea02 0103 	and.w	r1, r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80019c6:	bf00      	nop
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	03ff63ff 	.word	0x03ff63ff

080019d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b20      	cmp	r3, #32
 80019ec:	d138      	bne.n	8001a60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e032      	b.n	8001a62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2224      	movs	r2, #36	@ 0x24
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6819      	ldr	r1, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	e000      	b.n	8001a62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a60:	2302      	movs	r3, #2
  }
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b20      	cmp	r3, #32
 8001a82:	d139      	bne.n	8001af8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e033      	b.n	8001afa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2224      	movs	r2, #36	@ 0x24
 8001a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0201 	bic.w	r2, r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ac0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e000      	b.n	8001afa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001af8:	2302      	movs	r3, #2
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b10:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b14:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001b16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1c:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	4905      	ldr	r1, [pc, #20]	@ (8001b44 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40013800 	.word	0x40013800

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e291      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8087 	beq.w	8001c7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b6c:	4b96      	ldr	r3, [pc, #600]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d00c      	beq.n	8001b92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b78:	4b93      	ldr	r3, [pc, #588]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d112      	bne.n	8001baa <HAL_RCC_OscConfig+0x62>
 8001b84:	4b90      	ldr	r3, [pc, #576]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b90:	d10b      	bne.n	8001baa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b92:	4b8d      	ldr	r3, [pc, #564]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d06c      	beq.n	8001c78 <HAL_RCC_OscConfig+0x130>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d168      	bne.n	8001c78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e26b      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x7a>
 8001bb4:	4b84      	ldr	r3, [pc, #528]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a83      	ldr	r2, [pc, #524]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	e02e      	b.n	8001c20 <HAL_RCC_OscConfig+0xd8>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x9c>
 8001bca:	4b7f      	ldr	r3, [pc, #508]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a7e      	ldr	r2, [pc, #504]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b7c      	ldr	r3, [pc, #496]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7b      	ldr	r2, [pc, #492]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e01d      	b.n	8001c20 <HAL_RCC_OscConfig+0xd8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0xc0>
 8001bee:	4b76      	ldr	r3, [pc, #472]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a75      	ldr	r2, [pc, #468]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b73      	ldr	r3, [pc, #460]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a72      	ldr	r2, [pc, #456]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xd8>
 8001c08:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b6c      	ldr	r3, [pc, #432]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a6b      	ldr	r2, [pc, #428]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7fe ffd8 	bl	8000bdc <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7fe ffd4 	bl	8000bdc <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	@ 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e21f      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b61      	ldr	r3, [pc, #388]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0xe8>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7fe ffc4 	bl	8000bdc <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7fe ffc0 	bl	8000bdc <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	@ 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e20b      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	4b57      	ldr	r3, [pc, #348]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x110>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d069      	beq.n	8001d5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c86:	4b50      	ldr	r3, [pc, #320]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c92:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d11c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x190>
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d116      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	4b47      	ldr	r3, [pc, #284]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x17a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e1df      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b41      	ldr	r3, [pc, #260]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	493d      	ldr	r1, [pc, #244]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	e040      	b.n	8001d5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d023      	beq.n	8001d28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce0:	4b39      	ldr	r3, [pc, #228]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a38      	ldr	r2, [pc, #224]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7fe ff76 	bl	8000bdc <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7fe ff72 	bl	8000bdc <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1bd      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d06:	4b30      	ldr	r3, [pc, #192]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4929      	ldr	r1, [pc, #164]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
 8001d26:	e018      	b.n	8001d5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d28:	4b27      	ldr	r3, [pc, #156]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a26      	ldr	r2, [pc, #152]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7fe ff52 	bl	8000bdc <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7fe ff4e 	bl	8000bdc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e199      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d038      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d019      	beq.n	8001da2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6e:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d72:	4a15      	ldr	r2, [pc, #84]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7a:	f7fe ff2f 	bl	8000bdc <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d82:	f7fe ff2b 	bl	8000bdc <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e176      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x23a>
 8001da0:	e01a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da2:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da6:	4a08      	ldr	r2, [pc, #32]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dae:	f7fe ff15 	bl	8000bdc <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db6:	f7fe ff11 	bl	8000bdc <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d903      	bls.n	8001dcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e15c      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
 8001dc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dcc:	4b91      	ldr	r3, [pc, #580]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ee      	bne.n	8001db6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80a4 	beq.w	8001f2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de6:	4b8b      	ldr	r3, [pc, #556]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10d      	bne.n	8001e0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	4b88      	ldr	r3, [pc, #544]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	4a87      	ldr	r2, [pc, #540]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfe:	4b85      	ldr	r3, [pc, #532]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0e:	4b82      	ldr	r3, [pc, #520]	@ (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d118      	bne.n	8001e4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e26:	f7fe fed9 	bl	8000bdc <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2e:	f7fe fed5 	bl	8000bdc <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b64      	cmp	r3, #100	@ 0x64
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e120      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e40:	4b75      	ldr	r3, [pc, #468]	@ (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x31a>
 8001e54:	4b6f      	ldr	r3, [pc, #444]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e58:	4a6e      	ldr	r2, [pc, #440]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e60:	e02d      	b.n	8001ebe <HAL_RCC_OscConfig+0x376>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x33c>
 8001e6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6e:	4a69      	ldr	r2, [pc, #420]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e76:	4b67      	ldr	r3, [pc, #412]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7a:	4a66      	ldr	r2, [pc, #408]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e82:	e01c      	b.n	8001ebe <HAL_RCC_OscConfig+0x376>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d10c      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x35e>
 8001e8c:	4b61      	ldr	r3, [pc, #388]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e90:	4a60      	ldr	r2, [pc, #384]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e98:	4b5e      	ldr	r3, [pc, #376]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea4:	e00b      	b.n	8001ebe <HAL_RCC_OscConfig+0x376>
 8001ea6:	4b5b      	ldr	r3, [pc, #364]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eaa:	4a5a      	ldr	r2, [pc, #360]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb2:	4b58      	ldr	r3, [pc, #352]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb6:	4a57      	ldr	r2, [pc, #348]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001eb8:	f023 0304 	bic.w	r3, r3, #4
 8001ebc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d015      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec6:	f7fe fe89 	bl	8000bdc <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7fe fe85 	bl	8000bdc <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e0ce      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee4:	4b4b      	ldr	r3, [pc, #300]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0ee      	beq.n	8001ece <HAL_RCC_OscConfig+0x386>
 8001ef0:	e014      	b.n	8001f1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef2:	f7fe fe73 	bl	8000bdc <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7fe fe6f 	bl	8000bdc <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0b8      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f10:	4b40      	ldr	r3, [pc, #256]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1ee      	bne.n	8001efa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d105      	bne.n	8001f2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f22:	4b3c      	ldr	r3, [pc, #240]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	4a3b      	ldr	r2, [pc, #236]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001f28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80a4 	beq.w	8002080 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f38:	4b36      	ldr	r3, [pc, #216]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d06b      	beq.n	800201c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d149      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4c:	4b31      	ldr	r3, [pc, #196]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a30      	ldr	r2, [pc, #192]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001f52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7fe fe40 	bl	8000bdc <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7fe fe3c 	bl	8000bdc <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e087      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f72:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	019b      	lsls	r3, r3, #6
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	3b01      	subs	r3, #1
 8001f98:	041b      	lsls	r3, r3, #16
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa0:	061b      	lsls	r3, r3, #24
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001fa6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001faa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fac:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a18      	ldr	r2, [pc, #96]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001fb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fe10 	bl	8000bdc <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7fe fe0c 	bl	8000bdc <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e057      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd2:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x478>
 8001fde:	e04f      	b.n	8002080 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8001fe6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7fe fdf6 	bl	8000bdc <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7fe fdf2 	bl	8000bdc <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e03d      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <HAL_RCC_OscConfig+0x4cc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x4ac>
 8002012:	e035      	b.n	8002080 <HAL_RCC_OscConfig+0x538>
 8002014:	40023800 	.word	0x40023800
 8002018:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800201c:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <HAL_RCC_OscConfig+0x544>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d028      	beq.n	800207c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d121      	bne.n	800207c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d11a      	bne.n	800207c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800204c:	4013      	ands	r3, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002052:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002054:	4293      	cmp	r3, r2
 8002056:	d111      	bne.n	800207c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002062:	085b      	lsrs	r3, r3, #1
 8002064:	3b01      	subs	r3, #1
 8002066:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d107      	bne.n	800207c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002076:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800

08002090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0d0      	b.n	800224a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d910      	bls.n	80020d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b67      	ldr	r3, [pc, #412]	@ (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 020f 	bic.w	r2, r3, #15
 80020be:	4965      	ldr	r1, [pc, #404]	@ (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b63      	ldr	r3, [pc, #396]	@ (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0b8      	b.n	800224a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f0:	4b59      	ldr	r3, [pc, #356]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	4a58      	ldr	r2, [pc, #352]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 80020f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002108:	4b53      	ldr	r3, [pc, #332]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a52      	ldr	r2, [pc, #328]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 800210e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002112:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002114:	4b50      	ldr	r3, [pc, #320]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	494d      	ldr	r1, [pc, #308]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d040      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b47      	ldr	r3, [pc, #284]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d115      	bne.n	8002172 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e07f      	b.n	800224a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	4b41      	ldr	r3, [pc, #260]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e073      	b.n	800224a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002162:	4b3d      	ldr	r3, [pc, #244]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e06b      	b.n	800224a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002172:	4b39      	ldr	r3, [pc, #228]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f023 0203 	bic.w	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4936      	ldr	r1, [pc, #216]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002184:	f7fe fd2a 	bl	8000bdc <HAL_GetTick>
 8002188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218c:	f7fe fd26 	bl	8000bdc <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e053      	b.n	800224a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 020c 	and.w	r2, r3, #12
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d1eb      	bne.n	800218c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b4:	4b27      	ldr	r3, [pc, #156]	@ (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d210      	bcs.n	80021e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b24      	ldr	r3, [pc, #144]	@ (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 020f 	bic.w	r2, r3, #15
 80021ca:	4922      	ldr	r1, [pc, #136]	@ (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b20      	ldr	r3, [pc, #128]	@ (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e032      	b.n	800224a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f0:	4b19      	ldr	r3, [pc, #100]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4916      	ldr	r1, [pc, #88]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800220e:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	490e      	ldr	r1, [pc, #56]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002222:	f000 f821 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8002226:	4602      	mov	r2, r0
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	490a      	ldr	r1, [pc, #40]	@ (800225c <HAL_RCC_ClockConfig+0x1cc>)
 8002234:	5ccb      	ldrb	r3, [r1, r3]
 8002236:	fa22 f303 	lsr.w	r3, r2, r3
 800223a:	4a09      	ldr	r2, [pc, #36]	@ (8002260 <HAL_RCC_ClockConfig+0x1d0>)
 800223c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <HAL_RCC_ClockConfig+0x1d4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fc86 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023c00 	.word	0x40023c00
 8002258:	40023800 	.word	0x40023800
 800225c:	08002c44 	.word	0x08002c44
 8002260:	20002420 	.word	0x20002420
 8002264:	20002424 	.word	0x20002424

08002268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800226c:	b090      	sub	sp, #64	@ 0x40
 800226e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	637b      	str	r3, [r7, #52]	@ 0x34
 8002274:	2300      	movs	r3, #0
 8002276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002278:	2300      	movs	r3, #0
 800227a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002280:	4b59      	ldr	r3, [pc, #356]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	d00d      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x40>
 800228c:	2b08      	cmp	r3, #8
 800228e:	f200 80a1 	bhi.w	80023d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x34>
 8002296:	2b04      	cmp	r3, #4
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800229a:	e09b      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800229c:	4b53      	ldr	r3, [pc, #332]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x184>)
 800229e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022a0:	e09b      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022a2:	4b53      	ldr	r3, [pc, #332]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022a6:	e098      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022a8:	4b4f      	ldr	r3, [pc, #316]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80022b2:	4b4d      	ldr	r3, [pc, #308]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d028      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022be:	4b4a      	ldr	r3, [pc, #296]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	099b      	lsrs	r3, r3, #6
 80022c4:	2200      	movs	r2, #0
 80022c6:	623b      	str	r3, [r7, #32]
 80022c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022d0:	2100      	movs	r1, #0
 80022d2:	4b47      	ldr	r3, [pc, #284]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022d4:	fb03 f201 	mul.w	r2, r3, r1
 80022d8:	2300      	movs	r3, #0
 80022da:	fb00 f303 	mul.w	r3, r0, r3
 80022de:	4413      	add	r3, r2
 80022e0:	4a43      	ldr	r2, [pc, #268]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022e2:	fba0 1202 	umull	r1, r2, r0, r2
 80022e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022e8:	460a      	mov	r2, r1
 80022ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80022ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022ee:	4413      	add	r3, r2
 80022f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f4:	2200      	movs	r2, #0
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	61fa      	str	r2, [r7, #28]
 80022fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002302:	f7fd ff81 	bl	8000208 <__aeabi_uldivmod>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4613      	mov	r3, r2
 800230c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800230e:	e053      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002310:	4b35      	ldr	r3, [pc, #212]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	2200      	movs	r2, #0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	617a      	str	r2, [r7, #20]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002322:	f04f 0b00 	mov.w	fp, #0
 8002326:	4652      	mov	r2, sl
 8002328:	465b      	mov	r3, fp
 800232a:	f04f 0000 	mov.w	r0, #0
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	0159      	lsls	r1, r3, #5
 8002334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002338:	0150      	lsls	r0, r2, #5
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	ebb2 080a 	subs.w	r8, r2, sl
 8002342:	eb63 090b 	sbc.w	r9, r3, fp
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002352:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002356:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800235a:	ebb2 0408 	subs.w	r4, r2, r8
 800235e:	eb63 0509 	sbc.w	r5, r3, r9
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	00eb      	lsls	r3, r5, #3
 800236c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002370:	00e2      	lsls	r2, r4, #3
 8002372:	4614      	mov	r4, r2
 8002374:	461d      	mov	r5, r3
 8002376:	eb14 030a 	adds.w	r3, r4, sl
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	eb45 030b 	adc.w	r3, r5, fp
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800238e:	4629      	mov	r1, r5
 8002390:	028b      	lsls	r3, r1, #10
 8002392:	4621      	mov	r1, r4
 8002394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002398:	4621      	mov	r1, r4
 800239a:	028a      	lsls	r2, r1, #10
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a2:	2200      	movs	r2, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	60fa      	str	r2, [r7, #12]
 80023a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023ac:	f7fd ff2c 	bl	8000208 <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4613      	mov	r3, r2
 80023b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	3301      	adds	r3, #1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80023c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023d2:	e002      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d4:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x184>)
 80023d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3740      	adds	r7, #64	@ 0x40
 80023e0:	46bd      	mov	sp, r7
 80023e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	00f42400 	.word	0x00f42400
 80023f0:	017d7840 	.word	0x017d7840

080023f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d012      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800241c:	4b69      	ldr	r3, [pc, #420]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a68      	ldr	r2, [pc, #416]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002422:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002426:	6093      	str	r3, [r2, #8]
 8002428:	4b66      	ldr	r3, [pc, #408]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002430:	4964      	ldr	r1, [pc, #400]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800243e:	2301      	movs	r3, #1
 8002440:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d017      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800244e:	4b5d      	ldr	r3, [pc, #372]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002450:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002454:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245c:	4959      	ldr	r1, [pc, #356]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800246c:	d101      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800247a:	2301      	movs	r3, #1
 800247c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d017      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800248a:	4b4e      	ldr	r3, [pc, #312]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002490:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	494a      	ldr	r1, [pc, #296]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024a8:	d101      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 808b 	beq.w	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024d8:	4b3a      	ldr	r3, [pc, #232]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	4a39      	ldr	r2, [pc, #228]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80024e4:	4b37      	ldr	r3, [pc, #220]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024f0:	4b35      	ldr	r3, [pc, #212]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a34      	ldr	r2, [pc, #208]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024fc:	f7fe fb6e 	bl	8000bdc <HAL_GetTick>
 8002500:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7fe fb6a 	bl	8000bdc <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	@ 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e357      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002516:	4b2c      	ldr	r3, [pc, #176]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002522:	4b28      	ldr	r3, [pc, #160]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800252a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d035      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	429a      	cmp	r2, r3
 800253e:	d02e      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002540:	4b20      	ldr	r3, [pc, #128]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002544:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002548:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800254a:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	4a1d      	ldr	r2, [pc, #116]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002554:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002556:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255a:	4a1a      	ldr	r2, [pc, #104]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002560:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002562:	4a18      	ldr	r2, [pc, #96]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002568:	4b16      	ldr	r3, [pc, #88]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b01      	cmp	r3, #1
 8002572:	d114      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fb32 	bl	8000bdc <HAL_GetTick>
 8002578:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fb2e 	bl	8000bdc <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e319      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002592:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0ee      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025aa:	d111      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025ac:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025b8:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025ba:	400b      	ands	r3, r1
 80025bc:	4901      	ldr	r1, [pc, #4]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
 80025c2:	e00b      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40007000 	.word	0x40007000
 80025cc:	0ffffcff 	.word	0x0ffffcff
 80025d0:	4baa      	ldr	r3, [pc, #680]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4aa9      	ldr	r2, [pc, #676]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80025da:	6093      	str	r3, [r2, #8]
 80025dc:	4ba7      	ldr	r3, [pc, #668]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e8:	49a4      	ldr	r1, [pc, #656]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d010      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025fa:	4ba0      	ldr	r3, [pc, #640]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002600:	4a9e      	ldr	r2, [pc, #632]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002602:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002606:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800260a:	4b9c      	ldr	r3, [pc, #624]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800260c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002614:	4999      	ldr	r1, [pc, #612]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002628:	4b94      	ldr	r3, [pc, #592]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002636:	4991      	ldr	r1, [pc, #580]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800264a:	4b8c      	ldr	r3, [pc, #560]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800264c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002650:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002658:	4988      	ldr	r1, [pc, #544]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800266c:	4b83      	ldr	r3, [pc, #524]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002672:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800267a:	4980      	ldr	r1, [pc, #512]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800268e:	4b7b      	ldr	r3, [pc, #492]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002694:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269c:	4977      	ldr	r1, [pc, #476]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026b0:	4b72      	ldr	r3, [pc, #456]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	496f      	ldr	r1, [pc, #444]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d2:	4b6a      	ldr	r3, [pc, #424]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d8:	f023 020c 	bic.w	r2, r3, #12
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026e0:	4966      	ldr	r1, [pc, #408]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026f4:	4b61      	ldr	r3, [pc, #388]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	495e      	ldr	r1, [pc, #376]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002716:	4b59      	ldr	r3, [pc, #356]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002724:	4955      	ldr	r1, [pc, #340]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002738:	4b50      	ldr	r3, [pc, #320]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002746:	494d      	ldr	r1, [pc, #308]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800275a:	4b48      	ldr	r3, [pc, #288]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002760:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002768:	4944      	ldr	r1, [pc, #272]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800277c:	4b3f      	ldr	r3, [pc, #252]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002782:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278a:	493c      	ldr	r1, [pc, #240]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800279e:	4b37      	ldr	r3, [pc, #220]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ac:	4933      	ldr	r1, [pc, #204]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027c0:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027ce:	492b      	ldr	r1, [pc, #172]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d011      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027e2:	4b26      	ldr	r3, [pc, #152]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027f0:	4922      	ldr	r1, [pc, #136]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002800:	d101      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002802:	2301      	movs	r3, #1
 8002804:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002812:	2301      	movs	r3, #1
 8002814:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002822:	4b16      	ldr	r3, [pc, #88]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002828:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002830:	4912      	ldr	r1, [pc, #72]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00b      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002844:	4b0d      	ldr	r3, [pc, #52]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002854:	4909      	ldr	r1, [pc, #36]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d006      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 80d9 	beq.w	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002870:	4b02      	ldr	r3, [pc, #8]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a01      	ldr	r2, [pc, #4]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002876:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800287a:	e001      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800287c:	40023800 	.word	0x40023800
 8002880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002882:	f7fe f9ab 	bl	8000bdc <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002888:	e008      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800288a:	f7fe f9a7 	bl	8000bdc <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b64      	cmp	r3, #100	@ 0x64
 8002896:	d901      	bls.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e194      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800289c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d021      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d11d      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028bc:	4b64      	ldr	r3, [pc, #400]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028ca:	4b61      	ldr	r3, [pc, #388]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028d0:	0e1b      	lsrs	r3, r3, #24
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	019a      	lsls	r2, r3, #6
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	431a      	orrs	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	061b      	lsls	r3, r3, #24
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	071b      	lsls	r3, r3, #28
 80028f0:	4957      	ldr	r1, [pc, #348]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d004      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002916:	2b00      	cmp	r3, #0
 8002918:	d02e      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002922:	d129      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002924:	4b4a      	ldr	r3, [pc, #296]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002926:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800292a:	0c1b      	lsrs	r3, r3, #16
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002932:	4b47      	ldr	r3, [pc, #284]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002938:	0f1b      	lsrs	r3, r3, #28
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	019a      	lsls	r2, r3, #6
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	041b      	lsls	r3, r3, #16
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	061b      	lsls	r3, r3, #24
 8002952:	431a      	orrs	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	071b      	lsls	r3, r3, #28
 8002958:	493d      	ldr	r1, [pc, #244]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002960:	4b3b      	ldr	r3, [pc, #236]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002966:	f023 021f 	bic.w	r2, r3, #31
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	3b01      	subs	r3, #1
 8002970:	4937      	ldr	r1, [pc, #220]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01d      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002984:	4b32      	ldr	r3, [pc, #200]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800298a:	0e1b      	lsrs	r3, r3, #24
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002992:	4b2f      	ldr	r3, [pc, #188]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002994:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002998:	0f1b      	lsrs	r3, r3, #28
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	019a      	lsls	r2, r3, #6
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	431a      	orrs	r2, r3
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	431a      	orrs	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	071b      	lsls	r3, r3, #28
 80029b8:	4925      	ldr	r1, [pc, #148]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d011      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	019a      	lsls	r2, r3, #6
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	061b      	lsls	r3, r3, #24
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	071b      	lsls	r3, r3, #28
 80029e8:	4919      	ldr	r1, [pc, #100]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029f0:	4b17      	ldr	r3, [pc, #92]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a16      	ldr	r2, [pc, #88]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029fc:	f7fe f8ee 	bl	8000bdc <HAL_GetTick>
 8002a00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a04:	f7fe f8ea 	bl	8000bdc <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	@ 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e0d7      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a16:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	f040 80cd 	bne.w	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a2a:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a08      	ldr	r2, [pc, #32]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a36:	f7fe f8d1 	bl	8000bdc <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a3e:	f7fe f8cd 	bl	8000bdc <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b64      	cmp	r3, #100	@ 0x64
 8002a4a:	d903      	bls.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e0ba      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002a50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a54:	4b5e      	ldr	r3, [pc, #376]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a60:	d0ed      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d02e      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d12a      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a8a:	4b51      	ldr	r3, [pc, #324]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a98:	4b4d      	ldr	r3, [pc, #308]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9e:	0f1b      	lsrs	r3, r3, #28
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	019a      	lsls	r2, r3, #6
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	041b      	lsls	r3, r3, #16
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	061b      	lsls	r3, r3, #24
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	071b      	lsls	r3, r3, #28
 8002abe:	4944      	ldr	r1, [pc, #272]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ac6:	4b42      	ldr	r3, [pc, #264]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002acc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	493d      	ldr	r1, [pc, #244]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d022      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002af0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002af4:	d11d      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002af6:	4b36      	ldr	r3, [pc, #216]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afc:	0e1b      	lsrs	r3, r3, #24
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b04:	4b32      	ldr	r3, [pc, #200]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0a:	0f1b      	lsrs	r3, r3, #28
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	019a      	lsls	r2, r3, #6
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	041b      	lsls	r3, r3, #16
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	061b      	lsls	r3, r3, #24
 8002b24:	431a      	orrs	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	071b      	lsls	r3, r3, #28
 8002b2a:	4929      	ldr	r1, [pc, #164]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d028      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b3e:	4b24      	ldr	r3, [pc, #144]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b44:	0e1b      	lsrs	r3, r3, #24
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b4c:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b52:	0c1b      	lsrs	r3, r3, #16
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	019a      	lsls	r2, r3, #6
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	041b      	lsls	r3, r3, #16
 8002b64:	431a      	orrs	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	071b      	lsls	r3, r3, #28
 8002b72:	4917      	ldr	r1, [pc, #92]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b7a:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b88:	4911      	ldr	r1, [pc, #68]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b90:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0e      	ldr	r2, [pc, #56]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9c:	f7fe f81e 	bl	8000bdc <HAL_GetTick>
 8002ba0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ba4:	f7fe f81a 	bl	8000bdc <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	@ 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e007      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bc2:	d1ef      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3720      	adds	r7, #32
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800

08002bd4 <memset>:
 8002bd4:	4402      	add	r2, r0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d100      	bne.n	8002bde <memset+0xa>
 8002bdc:	4770      	bx	lr
 8002bde:	f803 1b01 	strb.w	r1, [r3], #1
 8002be2:	e7f9      	b.n	8002bd8 <memset+0x4>

08002be4 <__libc_init_array>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	4d0d      	ldr	r5, [pc, #52]	@ (8002c1c <__libc_init_array+0x38>)
 8002be8:	4c0d      	ldr	r4, [pc, #52]	@ (8002c20 <__libc_init_array+0x3c>)
 8002bea:	1b64      	subs	r4, r4, r5
 8002bec:	10a4      	asrs	r4, r4, #2
 8002bee:	2600      	movs	r6, #0
 8002bf0:	42a6      	cmp	r6, r4
 8002bf2:	d109      	bne.n	8002c08 <__libc_init_array+0x24>
 8002bf4:	4d0b      	ldr	r5, [pc, #44]	@ (8002c24 <__libc_init_array+0x40>)
 8002bf6:	4c0c      	ldr	r4, [pc, #48]	@ (8002c28 <__libc_init_array+0x44>)
 8002bf8:	f000 f818 	bl	8002c2c <_init>
 8002bfc:	1b64      	subs	r4, r4, r5
 8002bfe:	10a4      	asrs	r4, r4, #2
 8002c00:	2600      	movs	r6, #0
 8002c02:	42a6      	cmp	r6, r4
 8002c04:	d105      	bne.n	8002c12 <__libc_init_array+0x2e>
 8002c06:	bd70      	pop	{r4, r5, r6, pc}
 8002c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0c:	4798      	blx	r3
 8002c0e:	3601      	adds	r6, #1
 8002c10:	e7ee      	b.n	8002bf0 <__libc_init_array+0xc>
 8002c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c16:	4798      	blx	r3
 8002c18:	3601      	adds	r6, #1
 8002c1a:	e7f2      	b.n	8002c02 <__libc_init_array+0x1e>
 8002c1c:	08002c5c 	.word	0x08002c5c
 8002c20:	08002c5c 	.word	0x08002c5c
 8002c24:	08002c5c 	.word	0x08002c5c
 8002c28:	08002c60 	.word	0x08002c60

08002c2c <_init>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	bf00      	nop
 8002c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c32:	bc08      	pop	{r3}
 8002c34:	469e      	mov	lr, r3
 8002c36:	4770      	bx	lr

08002c38 <_fini>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr
